/*
 * Copyright 2010-2018 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Mostly copy'n'paste from llvmDebugInfoC
apply plugin: "cpp"
apply plugin: "c"
buildscript {
    ext.rootBuildDirectory = file('..')

    apply from: "$rootBuildDirectory/gradle/kotlinGradlePlugin.gradle"

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-stdlib:$buildKotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-native-shared:$konanVersion"
    }
}
import org.jetbrains.kotlin.konan.target.ClangArgs

model {
    components {
        llvmext(NativeLibrarySpec) {
            sources {
                cpp {
                    source.srcDirs "src/main/cpp"
                    exportedHeaders.srcDirs "src/main/include"
                }
            }
            binaries.withType(StaticLibraryBinarySpec) { binary ->
                if (project.parent.convention.plugins.platformInfo.isLinux())
                    // LLVM toolchain on linux is compiled with old ABI
                    // so we need to set this flag to prevent nasty linkage errors.
                    cppCompiler.args "-D_GLIBCXX_USE_CXX11_ABI=0"
                cppCompiler.args "-DLLVM_EXT_DEBUG=0"
                cppCompiler.args "--std=c++11", "-O2", "-g", "-fPIC", "-I${llvmDir}/include", "-L${llvmDir}/lib"
            }
            binaries.withType(SharedLibraryBinarySpec) { binary ->
                buildable = false
            }
        }
    }

    toolChains {
        clang(Clang) {
            eachPlatform {
                cppCompiler.withArguments(ClangArgs.&filterGradleNativeSoftwareFlags)
            }
        }
    }
}
